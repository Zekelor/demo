import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Random;
import java.util.Scanner;
import java.text.SimpleDateFormat;

/*public class CombatStats {                         //战斗状态统计
   enum CombatStatsMode{ f, z , y ，单怪模式，群怪模式 }
   CombatStatsMode mode;
}*/

/*public class PlayMode{                            //游戏模式
   enum PlayMode{ pve, pvp }
   PlayMode playMode;
}*/

/*public class Orientation {                          //方向
   enum OrientationValue{ east, west,north ,south }
   OrientationValue  o ;
}*/
public class Auto{
             public static final  int PAUSE_TIME = 500;  //暂停时间
             public static final  int PRESS_ONCE_TIME = 500;  //单次点击时间
             public static final int PUBLIC_CD_TIME = 800;   //公共CD
             //判断标准是 根据怪物级别对比、是否为精英、判断下自身的增益效果
             final int EASY = 100;          
             final int NORMAL = 101;
             final int SINGLE_HARD = 102;
             final int MULTIPLE_HARD = 103;
	

            int clocker;   //计时器
            int HP;  //定义HP值  判断停止还是继续
            int level;

            int magicValue;  //魔法变量值
            int magicValueMax;   //魔法值最大值 无上限
            int magicValueMin = 0;   //魔法值最小值
            int magicValueReply = 10;  //魔法恢复速度  value/s
            int magicValueGain = 0;  //魔法增益
            int magicValueRestrain = 0;  //魔法抑制
	    
            int energyVariationValue;  //能量变量值
            int energyValueMax = 100;   //能量值最大值
            int energyValueMin = 0;   //能量值最小值
            int energyValueReply = 10;  //能量恢复速度  value/s
            int energyValueGain = 0;  //能量增益
            int energyValueRestrain = 0;  //能量抑制
		
            int monsterLevel;//怪物血量等级
            int monsterHP; //怪物血量 目前单个模式
            //int monsterJInengh ;  //怪物技能
            
            //int[ ] position = new int[ ];  //储存位置坐标
            //int speedValue =  lucheng  / zuobiaoa dao b de shu zhi juliu  // 需要计算 不同状态下 数值不同(抽取计算方法)
	
	    // 增加启动的接口和录制动作的功能
	 
    public static void main(String[] args) throws AWTException {
        
         System.out.println("=======Auto Run========");
         System.out.println(TimeFactory.getSimpleDateFormat());  //系统时间  2019年9月23日19:07:43
         System.out.println("change join to game ");
         System.out.println("请输入：（未进入战斗状态 = 0 ,进入战斗状态 = 1）");
         Scanner s = new Scanner(System.in);
         Robot robot = new Robot();
         robot.delay(4000);  //延时
         int keyCode = 0;  //按键键值
         int event = 0;  // 触发事件
         int fKey = 1;  //总循环记数
    
         event = KeyEvent.VK_8;
         System.out.println(event);
         robot.keyRelease(event);
         System.out.println(event);
	//判断增益Buff
        do{ 
             if(  正常状态下 和 死亡复活后  2级判断 是否有魔法){
             //祝福30MIN 
	     //荆棘术10MIN 
	     //清晰预兆

	}else{
 	     //祝福30MIN 
	     //荆棘术10MIN 	
	}
         
         }
         while(true){      
                if(event == 56){
                int scale = 1;
                switch(scale){
                     case 0: 
	        /*未进入战斗状态 */
                        keyCode = KeyEvent.VK_1;
                        robot.keyPress(keyCode);
	        robot.keyRelease(keyCode);
	        robot.delay(1000);
		
	        keyCode = KeyEvent.VK_1;
                        robot.keyPress(keyCode);
	        robot.keyRelease(keyCode);
	        robot.delay(1000);

	        keyCode = KeyEvent.VK_5;
                        robot.keyPress(keyCode);
	        robot.keyRelease(keyCode);
	        robot.delay(2000);
				
                        keyCode = KeyEvent.VK_4;
                        robot.keyPress(keyCode);
	        robot.keyRelease(keyCode);
	        robot.delay(1000);
		
	        keyCode = KeyEvent.VK_7;
                        robot.keyPress(keyCode);
	        robot.keyRelease(keyCode);
	        robot.delay(1000);

	    case 1: 		
                        /*进入战斗状态 */
                        if(scale == 1){        // 判断是否抵抗
	            //精灵之火（野性）
	            keyCode = KeyEvent.VK_0;
                            robot.keyPress(keyCode);
                            robot.keyRelease(keyCode);		
	            robot.delay(800);
	       }else{
		
	           //再次施放精灵之火（野性）
	           keyCode = KeyEvent.VK_0;
                           robot.keyPress(keyCode);
                           robot.keyRelease(keyCode);		
	           robot.delay(800);
	       }

	      for(int i = 0; i < 3; i++){
	          //int keyCode = 0;
	          int  count = 0;
	          while(true){
		        keyCode = KeyEvent.VK_2;
                                        robot.keyPress(keyCode);
		        robot.keyRelease(keyCode);
		        robot.delay(800);
		        count++;
		             if(count == 2){
			   break;
		              }else{
                                                   continue;
		              }
	             } 
	        keyCode = KeyEvent.VK_9;
                        robot.keyPress(keyCode);
	        robot.keyRelease(keyCode);
	         robot.delay(800);
	         count = 0;
	         while(true){
		keyCode = KeyEvent.VK_2;
                                robot.keyPress(keyCode);
		robot.keyRelease(keyCode);
		robot.delay(800);
		count++;
		if(count == 3){
			break;
		}else{
                                  	continue;
		}
	           }
		
	          keyCode = KeyEvent.VK_3;
                          robot.keyPress(keyCode);
	          robot.keyRelease(keyCode);
	          robot.delay(800);
		
	     }
             default:	
	     break;	
            }
	  fKey++;

           }else{
                event = 0;
	break;	
        }


        if(fKey > 1){
	break;
        }
     }
    
        System.out.println("=======Game Over========");
    }
}

//自定义监听事件

//获取系统时间
public class TimeFactory {
    public static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat("hh:mm:ss");
    public static SimpleDateFormat getSimpleDateFormat() {
        return SIMPLE_DATE_FORMAT;
    }
}

public class Keyboard {
    public static final int A = 0x41;
    public static final int B = 0x42;
    public static final int C = 0x43;
    public static final int D = 0x44;
    public static final int E = 0x45;
    public static final int F = 0x46;
    public static final int G = 0x47;
    public static final int H = 0x48;
    public static final int I = 0x49;
    public static final int J = 0x4A;
    public static final int K = 0x4B;
    public static final int L = 0x4C;
    public static final int M = 0x4D;
    public static final int N = 0x4E;
    public static final int O = 0x4F;
    public static final int P = 0x50;
    public static final int Q = 0x51;
    public static final int R = 0x52;
    public static final int S = 0x53;
    public static final int T = 0x54;
    public static final int U = 0x55;
    public static final int V = 0x56;
    public static final int W = 0x57;
    public static final int X = 0x58;
    public static final int Y = 0x59;
    public static final int Z = 0x5A;
    public static final int SPACE = 0x20;
    public static final int ZERO = 0x30;
    public static final int ONE = 0x31;
    public static final int TWO = 0x32;
    public static final int THREE = 0x33;
    public static final int FOUR = 0x34;
    public static final int FIVE = 0x35;
    public static final int SIX = 0x36;
    public static final int SEVEN = 0x37;
    public static final int EIGHT = 0x38;
    public static final int NINE = 0x39;
}
